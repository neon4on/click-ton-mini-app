#pragma version >=0.2.0;

#include "imports/stdlib.fc";

;; Storage
;; (owner_address, total_supply, users:(dict address -> uint64))
(slice, int, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),  ;; owner_address
        ds~load_uint(64),    ;; total_supply
        ds~load_dict()       ;; users
    );
}

() save_data(slice owner_address, int total_supply, cell users) impure inline {
    set_data(begin_cell()
        .store_slice(owner_address)
        .store_uint(total_supply, 64)
        .store_dict(users)
        .end_cell());
}

;; Messages
const int op::mine = 0x1234;
const int op::transfer = 0x5678;

;; Getters
int get_user_balance(slice address) method_id {
    (_, _, cell users) = load_data();
    (cell value, int found) = udict_get?(users, 256, address.preload_uint(256));
    if (found) {
        return value.begin_parse().preload_uint(64);
    } else {
        return 0;
    }
}

;; Mine coins
() mine() impure {
    (slice owner_address, int total_supply, cell users) = load_data();
    slice sender_address = sender_address();
    (cell value, int found) = udict_get?(users, 256, sender_address.preload_uint(256));
    int balance = 0;
    if (found) {
        balance = value.begin_parse().preload_uint(64);
    }
    balance += 1;
    total_supply += 1;
    users~udict_set(256, sender_address.preload_uint(256), begin_cell().store_uint(balance, 64).end_cell());
    save_data(owner_address, total_supply, users);
}

;; Transfer coins
() transfer(slice to_address, int amount) impure {
    throw_if(35, amount <= 0);
    (slice owner_address, int total_supply, cell users) = load_data();
    slice sender_address = sender_address();
    (cell sender_value, int sender_found) = udict_get?(users, 256, sender_address.preload_uint(256));
    throw_unless(36, sender_found);
    int sender_balance = sender_value.begin_parse().preload_uint(64);
    throw_if(37, sender_balance < amount);
    sender_balance -= amount;
    users~udict_set(256, sender_address.preload_uint(256), begin_cell().store_uint(sender_balance, 64).end_cell());
    
    (cell receiver_value, int receiver_found) = udict_get?(users, 256, to_address.preload_uint(256));
    int receiver_balance = 0;
    if (receiver_found) {
        receiver_balance = receiver_value.begin_parse().preload_uint(64);
    }
    receiver_balance += amount;
    users~udict_set(256, to_address.preload_uint(256), begin_cell().store_uint(receiver_balance, 64).end_cell());
    
    save_data(owner_address, total_supply, users);
}

;; Main contract logic
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    int op = in_msg_body~load_uint(32);
    if (op == op::mine) {
        mine();
    } elseif (op == op::transfer) {
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_uint(64);
        transfer(to_address, amount);
    }
}